import { DEVICES } from "./supported-devices.js";
import { InterByteTimeoutStream } from "./inter-byte-timeout-stream.js";

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

/**
 * WebSerialBarcodeScanner class for interacting with barcode scanners via WebSerial API.
 * Emits events for data and status updates.
 *
 * Events:
 * - 'data': Dispatched when data is received from the scanner. detail: string
 * - 'status': Dispatched when connection status changes. detail: { message: string, status: 'connected' | 'disconnected' }
 */
class WebSerialBarcodeScanner extends EventTarget {
    /**
     * Creates an instance of WebSerialBarcodeScanner.
     * @param {Object} [options={}] - Configuration options
     * @param {number} [options.baudRate=9600] - Baud rate for serial communication
     * @param {number} [options.reconnectDelay=3000] - Delay in ms before reconnect scanner attempts, ms
     * @param {number} [options.interByteTimeout=100] - interval of waiting for a portion of data from the scanner (serial port), ms
     * @param {function} [options.onData] - Callback for received data (deprecated, use 'data' event)
     * @param {function} [options.onStatusUpdate] - Callback for status updates (deprecated, use 'status' event)
     */
    constructor(options = {}) {
        super();
        this.port = null;
        this.reader = null;
        this.isConnected = false;
        this.autoConnectEnabled = false;
        this.supportedDevices = DEVICES; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Å–º supported-devices.js)
        this.userDevices = {}; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ö—Ä–∞–Ω–∏–º –≤ localStorage)
        this.barcodeDataParser = options.barcodeDataParser || null;
        this.baudRate = options.baudRate || 9600;
        this.reconnectDelay = options.reconnectDelay || 3000;
        this.interByteTimeout = options.interByteTimeout || 100;
        this.autoConnectIntervalID = null;
        this.decoder = new TextDecoder();
        this.loadSettings();
        this.setupVisibilityListener();
        // Backward compatibility for callback-based options
        if (options.onData) {
            this.addEventListener('data', (event) => options.onData(event.detail));
        }
        if (options.onStatusUpdate) {
            this.addEventListener('status', (event) => options.onStatusUpdate(event.detail.message, event.detail.status));
        }
    }

    _toRadix16(num) {
        if (typeof num === 'string') {
            return parseInt(num, 16);
        } else {
            return num;
        }
    }

    _toRadix16String(num) {
        return num?.toString(16).padStart(4, '0').toUpperCase();
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ) */
    getAllDevices() {
        return {
            ...this.supportedDevices,
            ...this.userDevices
        };
    }

    /** –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage */
    loadSettings() {
        const settings = JSON.parse(localStorage.getItem('WebSerialBarcodeScannerSettings')) || {};
        this.autoConnectEnabled = settings.autoConnectEnabled || false;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.userDevices = settings.userDevices || {};
    }

    /** –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage */
    saveSettings() {
        const settings = {
            autoConnectEnabled: this.autoConnectEnabled,
            userDevices: this.userDevices
        };

        localStorage.setItem('WebSerialBarcodeScannerSettings', JSON.stringify(settings));
    }

    /** –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏ */
    setupVisibilityListener() {
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible' && this.autoConnectEnabled && !this.autoConnectIntervalID) {
                this.checkForDevices();
            } else if (document.visibilityState === 'hidden' && this.autoConnectIntervalID) {
                clearTimeout(this.autoConnectIntervalID);
            }
        });
    }

    /** –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∫–∞–Ω–µ—Ä –≤—Ä—É—á–Ω—É—é */
    async connect() {
        try {
            console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∫–∞–Ω–µ—Ä..', this.port);
            if (this.port) {
                await this.disconnect()
            }

            const port = await navigator.serial.requestPort();
            await port.open({ baudRate: this.baudRate });
            this.port = port;
            this.isConnected = true;
            const info = port.getInfo();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            const allDevices = this.getAllDevices();
            const vendorId = this._toRadix16String(info.usbVendorId);
            const productId = this._toRadix16String(info.usbProductId);
            const vendor = allDevices[vendorId];
            const device = vendor && vendor.devices[productId];

            const vidPidString = `(VID:${vendorId}, PID:${productId})`;
            const deviceName = `${device?.name || vendor?.vendorName || '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'} ${vidPidString}`;

            this.dispatchEvent(new CustomEvent('status', { detail: { message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ${deviceName}`, status: 'connected' } }));
            await this.readData(port);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.dispatchEvent(new CustomEvent('status', { detail: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∫–∞–Ω–µ—Ä—É', status: 'disconnected' } }));
            if (this.port) {
                await this.port.close().catch(() => {});
                this.port = null;
            }
            this.isConnected = false;
        }
    }

    /** –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–∫–∞–Ω–µ—Ä */
    async disconnect() {

        console.log('–û—Ç–∫–ª—é—á–∞–µ–º —Å–∫–∞–Ω–µ—Ä..', this.port);
        if (this.reader) {
            await this.aborter?.abort('user_disconnect_scanner');
            await this.reader.releaseLock();
            this.reader = null;
            // this.readableStream.cancel('my_error')
            //     .then(r => {
            //         console.log('then', r);
            //         return this.port.close();
            //     }).then( r => {
            //         console.log('then2', r);
            //         this.port = null;
            //     })
            //     .catch(e => console.log(e));

        }

        console.log('wait.. 1s', this.port);
        /** disconnect SerialPort trouble..:
         - https://github.com/WICG/serial/issues/209
         - https://stackoverflow.com/questions/71262432/how-can-i-close-a-web-serial-port-that-ive-piped-through-a-transformstream
         */
        await delay(1000)
        console.log('close port', this.port);

        if (this.port) {
            await this?.port?.close();
            this.port = null;
            // console.log('port closed?', this.port);
        }

        this.isConnected = false;
        this.dispatchEvent(new CustomEvent('status', { detail: { message: '–°–∫–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω', status: 'disconnected' } }));
    }

    /** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */
    async checkForDevices() {
        console.log(`üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`);
        // console.log(`‚ùó ‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `, this);
        if (this.port?.readable) return;
        try {
            const ports = await navigator.serial.getPorts();
            const allDevices = this.getAllDevices(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫

            const matchingPorts = ports.filter(port => {
                const info = port.getInfo();
                const vendorId = this._toRadix16String(info.usbVendorId);
                const productId = this._toRadix16String(info.usbProductId);
                return allDevices[vendorId] && allDevices[vendorId].devices[productId];
            });

            const availablePorts = matchingPorts.filter(port => !port.readable && !port.writable);
            if (availablePorts.length > 0) {
                const port = availablePorts[0];
                try {
                    await port.open({ baudRate: this.baudRate });
                    console.log('–ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç: ', port);
                    port.ondisconnect = () => {
                        this.port = null;
                        this.isConnected = false;
                        if (this.autoConnectEnabled) {
                            setTimeout(() => this.checkForDevices(), this.reconnectDelay);
                        }
                    }
                    this.port = port;
                    this.isConnected = true;
                    const info = port.getInfo();

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    const allDevices = this.getAllDevices();
                    const vendorId = this._toRadix16String(info.usbVendorId);
                    const productId = this._toRadix16String(info.usbProductId);
                    const vendor = allDevices[vendorId];
                    const device = vendor && vendor.devices[productId];

                    const vidPidString = `(VID:${vendorId}, PID:${productId})`;
                    const deviceName = `${device?.name || vendor?.vendorName || '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'} ${vidPidString}`;

                    this.dispatchEvent(new CustomEvent('status', { detail: { message: `–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ ${deviceName}`, status: 'connected' } }));
                    await this.readData(port);
                } catch (openError) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞:', openError);
                    this.dispatchEvent(new CustomEvent('status', { detail: { message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', status: 'disconnected' } }));
                    if (this.port) {
                        await this.port.close().catch(() => {});
                        this.port = null;
                    }
                    this.isConnected = false;
                }
            } else {
                this.isConnected = false;
                this.port = null;
                if (this.autoConnectEnabled) {
                    setTimeout(() => this.checkForDevices(), this.reconnectDelay);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤:', error);
            this.isConnected = false;
            if (this.autoConnectEnabled) {
                setTimeout(() => this.checkForDevices(), this.reconnectDelay);
            }
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–∞–Ω–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {SerialPort} port - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç
     */
    async readData(port) {
        try {
            const aborter = new AbortController();
            this.aborter = aborter;

            const timeoutStream = new InterByteTimeoutStream(this.interByteTimeout);
            const readableStream = port.readable.pipeThrough(timeoutStream, {signal: aborter.signal});
            this.readableStream = readableStream


            this.reader = readableStream.getReader();

            while (this.reader && this.port?.connected) {
                const { value, done } = await this.reader.read();
                if (done) {
                    this.reader.releaseLock();
                    break;
                }
                const data = this.decoder.decode(value).trim();

                if (value) {
                    if (this.barcodeDataParser) {
                        const parseResult = this.barcodeDataParser.parse(value, data);
                        if (parseResult.error) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseResult.error);
                            this.dispatchEvent(new CustomEvent('data', {
                                detail: { raw: value, data, error: parseResult.error }
                            }));
                        } else {
                            this.dispatchEvent(new CustomEvent('data', {
                                detail: { raw: value, data, ...parseResult }
                            }));
                        }
                    } else {
                        if (data) {
                            this.dispatchEvent(new CustomEvent('data', { detail: { raw: value, data } }));
                        }
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.dispatchEvent(new CustomEvent('status', {
                detail: { message: error.message || error || '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' }
            }));
            if (error === 'user_disconnect_scanner') {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞');
            }
        } finally {
            this.reader = null;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
     * @param {string} vid - Vendor ID
     * @param {string} pid - Product ID
     */
    addDevice(vid, pid) {
        if (!/^[0-9A-F]{4}$/i.test(vid) || !/^[0-9A-F]{4}$/i.test(pid)) {
            return false;
        }

        const vendorId = vid.toUpperCase();
        const productId = pid.toUpperCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        if (this.supportedDevices[vendorId] && this.supportedDevices[vendorId].devices[productId]) {
            this.dispatchEvent(new CustomEvent('status', {
                detail: {
                    message: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (VID:0x${vendorId}, PID:0x${productId}) —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö`
                }
            }));
            return false;
        }

        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (!this.userDevices[vendorId]) {
            this.userDevices[vendorId] = {
                vendorName: `Vendor ${vendorId}`,
                devices: {}
            };
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        this.userDevices[vendorId].devices[productId] = {
            name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (VID:0x${vendorId}, PID:0x${productId})`
        };

        this.saveSettings();
        this.dispatchEvent(new CustomEvent('status', {
            detail: {
                message: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (VID:0x${vendorId}, PID:0x${productId}) –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`
            }
        }));

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        this.dispatchEvent(new CustomEvent('user-devices-updated', {
            detail: { userDevices: this.userDevices }
        }));
        console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ', this.userDevices);
        return true;
    }


    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
     * @param {string} vid - Vendor ID
     * @param {string} pid - Product ID
     */
    removeDevice(vid, pid) {
        if (!/^[0-9A-F]{4}$/i.test(vid) || !/^[0-9A-F]{4}$/i.test(pid)) {
            return false;
        }
        const vendorId = vid.toUpperCase();
        const productId = pid.toUpperCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if (!this.userDevices[vendorId] || !this.userDevices[vendorId].devices[productId]) {
            this.dispatchEvent(new CustomEvent('status', {
                detail: {
                    message: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (VID:0x${vendorId}, PID:0x${productId}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö`
                }
            }));
            return false;
        }

        // –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        delete this.userDevices[vendorId].devices[productId];

        // –ï—Å–ª–∏ —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —É–¥–∞–ª—è–µ–º –∏ —Å–∞–º–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        if (Object.keys(this.userDevices[vendorId].devices).length === 0) {
            delete this.userDevices[vendorId];
        }

        this.saveSettings();

        this.dispatchEvent(new CustomEvent('status', {
            detail: {
                message: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (VID:0x${vendorId}, PID:0x${productId}) —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö`
            }
        }));

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        this.dispatchEvent(new CustomEvent('user-devices-updated', {
            detail: { userDevices: this.userDevices }
        }));

        console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ', this.userDevices);
        return true;
    }

    /** –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ */
    enableAutoConnect() {
        this.autoConnectEnabled = true;
        this.saveSettings();
        this.checkForDevices();
    }

    /** –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ */
    disableAutoConnect() {
        this.autoConnectEnabled = false;
        if (this.autoConnectIntervalID) {
            clearTimeout(this.autoConnectIntervalID);
            this.autoConnectIntervalID = null;
        }
        this.saveSettings();
    }
}

// if (typeof exports !== 'undefined') {
//     exports.WebSerialBarcodeScanner = WebSerialBarcodeScanner;
// }

export { WebSerialBarcodeScanner, DEVICES };